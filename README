***********************************************************************************************************************************************************
HOW TO USE

Compile using:
make arith

run with:
a) compression
./arith -c "file_to_be_compressed.ppm" > "decompressed_file.ppm"

b) decompression
./arith -d "file_to_be_decompressed.ppm" > "compressed_file.ppm"

NOTE: PPM stands for Portable Pixmap Format.Although these files are rare these days, you can spot one by looking out for the . PPM extension. The PPM 
format emerged in the late 1980s to make sharing images between different platforms easier as they rely on r,g,b values which are easier to manipulate.

***********************************************************************************************************************************************************

Description:
Arith is an image compression/decompression algorithm that runs on C. It makes use of bitpacking, quantization, as well as discrete cosine transformations.
A ppm is fed in to the compressor, which it converts into a specific compressed format where every 4 bytes in the file are converted to 1 byte. The 
decompressor takes in a file of this certain format and converts it into a regular ppm file. The size saved is a lot because 4 bytes are converted into 
one and for really bbig images this is very effective.

Architecture and file description:
Our program is broken up into several modules. The modules are as follows:
    1. 40images.c --> This is the main function for our program. It contains
                      the command loop that will read in the user input and 
                      file from the terminal. Assuming the user input is
                      correct, it will call the corresponding helper functions
                      to either compress or decompress the image.

    2. Compress40.c --> This is called by the main function after reading in 
                        the user input from the command line. It will either
                        call a compressor or decompressor function that take
                        in the inputted file and begin to compress or 
                        decompress the image.

    3. arithio.c --> this module handles all the I/O for the program. It is
                     called in compress40. For compression, it reads in a 
                     normal image file and stores the information in a Pnm_ppm
                     and it will write the compressed image to stdout. For
                     decompression, it will read in the file and store the
                     compressed image into a 2d array. It will also print the
                     decompressed image to stdout. 

    4. compressor.c --> This module acts as a main for the compression process
                        of the program. It will create arrays and carryout the 
                        conversion of pixels starting from a Pnm_ppm object 
                        all the way to a 2d array of compressed bits. It then
                        sends the final 2d array to the I/O module to print.

    5. decompressor.c --> This module acts as a main for the decompression 
                        process of the program. It will create arrays and 
                        carryout the conversion of pixels starting from a 2d
                        array of bits to a Pnm_ppm object that contains the 
                        decompressed image. It then sends the Pnm_ppm object
                        to the I/O module to print to stdout. 

    6. calculations.c --> This module contains all the calculations for
                          converting the pixels to different formats. This
                          is mainly done through several apply functions. It
                          will also quantize pixels to make sure that they
                          are in the specified range.

    7. bitpack.c --> This module contains all the bitpacking functions needed
                     to bitpack compressed pixels and "unbitpack" bits from a
                     compressed image file.

    8. new_pnm.c --> This module makes and populates a new Pnm_ppm object that
                     contains the decompressed image.
    9. float_rgb.h,
       comp_video.h,
       compressed_pix.h --> these files define the various structs for the
                            different formats of pixels.

    10. constants.h --> this file contains all the constants for the program
                        such as blocksize, denominators, quantization values,
                        and width of bits. 
